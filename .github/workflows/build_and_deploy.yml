name: Build Starterkit Frontend CICD

on:
  push:
    branches:
      - develop
      - staging
      - master
  workflow_dispatch:

env:
  AUTHOR: naxa
  AWS_REGION: ap-south-1
  PROJECT_NAME: react-typescript-starterkit-v3

jobs:
  build:
    name: Build Static Files
    runs-on: self-hosted
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Use Node.js 19.x
        uses: actions/setup-node@v4
        with:
          node-version: 19.x

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Write Environment Variables
        id: write_env
        run: |
          case "${{ github.ref }}" in
          refs/heads/develop)
          echo '
          # Write Development Environments
          SITE_NAME="Starter Kit -v3 (Ts)"
          BASE_URL=https://admin.naxa.com.np
          API_URL_V1=https://admin.naxa.com.np/api/v1
          ' > .env
          ;;
          refs/heads/staging)
          echo '
          # Write Staging Environments
          SITE_NAME="Starter Kit -v3 (Ts)"
          BASE_URL=https://admin.naxa.com.np
          API_URL_V1=https://admin.naxa.com.np/api/v1
          ' > .env
          ;;
          refs/heads/master)
          echo '
          # Write Production Environments
          SITE_NAME="Starter Kit -v3 (Ts)"
          BASE_URL=https://admin.naxa.com.np
          API_URL_V1=https://admin.naxa.com.np/api/v1
          ' > .env
          ;;
          esac

      - name: Install yarn
        run: npm install -g yarn

      - name: Install dependencies
        run: yarn

      - name: Generate build
        run: |
          yarn build
  
      - name: Upload Build Artifacts
        uses: naxa-developers/gh-workflows/.github/actions/build-artifact-uploader@artifact_uploader/v1.0.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          project-name: ${{ env.PROJECT_NAME }}
          s3-base-path: "s3://naxa-ci-artifacts"
          source-directory: "./dist"

  deploy:
    name: Deploy Static Files
    needs:
      - build
    if: ${{ github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/master'  }}
    runs-on: self-hosted
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: naxa-developers/gh-workflows/.github/actions/build-artifact-downloader@artifact_downloader/v1.0.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          project-name: ${{ env.PROJECT_NAME }}
          s3-base-path: "s3://naxa-ci-artifacts"
          target-directory: "."

      - name: Get VM SSH host and user
        id: get_vm_conf
        run: |
          case "${{ github.ref }}" in
          refs/heads/develop)
              export SERVER_IP=159.89.164.123
              export SERVER_USERNAME=devops
              export PROJECT_PATH=/srv/Projects/react-typescript-starterkit-v3
              ;;      
              refs/heads/staging)
              export SERVER_IP=159.89.164.123
              export SERVER_USERNAME=devops
              export PROJECT_PATH=/srv/Projects/react-typescript-starterkit-v3
              ;;
              refs/heads/master)
              export SERVER_IP=159.89.164.123
              export SERVER_USERNAME=devops
              export PROJECT_PATH=/srv/Projects/react-typescript-starterkit-v3   
          esac
          echo "SERVER_IP=${SERVER_IP}" >> $GITHUB_OUTPUT
          echo "SERVER_USERNAME=${SERVER_USERNAME}" >> $GITHUB_OUTPUT
          echo "PROJECT_PATH=${PROJECT_PATH}" >> $GITHUB_OUTPUT

      - name: Copy build file using appleboy-scp
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ steps.get_vm_conf.outputs.SERVER_IP }}
          username: ${{ steps.get_vm_conf.outputs.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          overwrite: true
          source: './dist/*'
          target: ${{ steps.get_vm_conf.outputs.PROJECT_PATH }}
